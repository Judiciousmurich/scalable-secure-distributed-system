Final Report: Distributed Task Scheduler System
1. Problem Statement
In modern computing, handling large-scale, computationally intensive tasks is a significant
challenge, especially when tasks need to be processed in parallel across multiple systems. Centralized systems often struggle with managing scalability, fault tolerance, and task
distribution. The Distributed Task Scheduler system aims to address these challenges by
providing a scalable, fault-tolerant, and secure solution for distributing computational tasks
across multiple clients and servers. The system allows tasks to be divided into subtasks, processed concurrently by multiple clients, and results aggregated efficiently, showcasing the use
of parallel processing, socket programming, and secure communication. 2. System Architecture and Design
2.1 System Overview
The Distributed Task Scheduler is designed to efficiently distribute computational tasks across
multiple client machines for parallel execution. It leverages a central server to manage task
distribution and multiple clients to process tasks concurrently. The system ensures scalability
through horizontal scaling, fault tolerance through retry mechanisms, and secure communication
using SSL/TLS encryption. 2.2 Architecture Diagram
2.3 System Design Components
1. Central Server: This is the core component that receives task requests, divides them into
subtasks, and distributes the subtasks to available clients. It also aggregates the results
from clients and returns the final outcome to the requester. 2. Client Workers: Each client receives subtasks from the central server and processes
them in parallel using the multiprocessing library. Clients send the results back to the
server once processing is complete. 3. Task Queue: Each client has a local task queue that stores the subtasks. The queue is
managed using Python's multiprocessing.Queue, ensuring efficient handling of multiple
tasks concurrently. 4. Communication: The communication between the server and clients is established using
socket programming. The communication is secured using SSL/TLS encryption, ensuring
the confidentiality and integrity of data. 2.4 Workflow
1. The central server receives a task request. 2. The task is divided into smaller subtasks. 3. Subtasks are distributed to available clients based on a round-robin algorithm. 4. Clients process tasks concurrently and send back results. 5. The central server aggregates the results from all clients. 6. The final result is returned to the original requester. 3. Python Code Explanations
3.1 Server Code
The server listens for incoming client connections and manages task distribution. It uses socket
programming to establish connections and ssl for secure communication. Upon receiving a task, the server divides it into subtasks and allocates them to available clients using a round-robin load
balancing mechanism. The server also aggregates the results from the clients. python
Copy code
import socket
import ssl
import threading
import json
def handle_client(client_socket):
data = client_socket.recv(1024)
task = json.loads(data.decode())
# Divide task into subtasks and distribute to clients
# Aggregate results and send final response back
3.2 Client Code
Each client connects to the server using a secure socket connection and listens for incoming
subtasks. The client processes the tasks using multiprocessing and sends the results back to the
server. python
Copy code
import socket
import ssl
import json
def connect_to_server():
context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
connection = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname="server")
connection.connect(("localhost", 9999))
# Receive task, process, and send result back
3.3 Multithreading and Multiprocessing
The system uses multithreading to handle multiple client connections concurrently. Each client
runs in a separate thread to ensure that multiple clients can be served simultaneously without
blocking other clients. For task execution, multiprocessing is used to process the subtasks in parallel. This allows the
system to scale by distributing tasks across multiple cores of the client machines. 3.4 Security
SSL/TLS encryption is implemented using Python’s ssl module to secure the communication
between the server and clients. Authentication mechanisms ensure that only authorized clients
can connect to the server. 4. Test Cases and Results
4.1 Test Case 1: Client-Server Communication
 Objective: Verify that the client can successfully send a message to the server and
receive a response.  Expected Result: The client should receive the correct response from the server.  Result: Pass – The client and server successfully exchanged messages. 4.2 Test Case 2: Multi-client Handling
 Objective: Verify that the server can handle multiple clients concurrently using
multithreading.  Expected Result: Each client should be served without delay or error.  Result: Pass – The server handled multiple clients without issues, utilizing threads to
process them concurrently. 4.3 Test Case 3: Fault Tolerance (Client Disconnection)  Objective: Verify that the server can handle a client disconnection gracefully.  Expected Result: The server should catch the exception and continue functioning.  Result: Pass – The server handled client disconnections without crashing. 4.4 Test Case 4: Secure Communication (SSL/TLS)  Objective: Verify that communication between the client and server is encrypted.  Expected Result: Data should be securely transmitted using SSL/TLS encryption.  Result: Pass – The data was transmitted securely between the client and server. 4.5 Test Case 5: Authentication
 Objective: Verify that only authenticated clients can connect to the server.  Expected Result: Unauthorized clients should be rejected.  Result: Pass – Unauthorized clients were successfully rejected. 5. Conclusion
The Distributed Task Scheduler system successfully implements key concepts of distributed and
parallel computing. By using a client-server architecture with task distribution, secure
communication, and fault tolerance, the system ensures scalability and reliability in handling
large-scale computational tasks. The use of multithreading and multiprocessing enables the
system to process multiple tasks concurrently, while SSL/TLS encryption and authentication
mechanisms provide secure communication. This system can be further enhanced for more
advanced use cases, such as distributed data processing or parallel machine learning tasks.